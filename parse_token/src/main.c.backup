/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: Guillem Barulls <Guillem Barulls>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/22 20:05:42 by Guillem Barulls   #+#    #+#             */
/*   Updated: 2025/01/23 18:52:25 by Guillem Barulls  ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include <stdio.h>
# include <unistd.h>
# include <stdlib.h>
# include <stdbool.h>
# include <string.h>

typedef struct s_par
{
	char			*command;
	char			*variable;
	char			*infile;
	char			*outfile;
	char			*a_infile;
	char			*a_outfile;
	struct s_par	*next;
}	t_par;

typedef struct s_parse
{
	t_par	*head;
	t_par	*tail;
}	t_parse;

void add_node(t_parse *data, char *command, char *variable, char *infile, char *outfile)
{
    t_par *new_node = (t_par *)malloc(sizeof(t_par));
    if (!new_node)
        return;

    new_node->command = NULL;
    new_node->variable = NULL;
    new_node->infile = NULL;
    new_node->outfile = NULL;
    new_node->next = NULL;

    if (command)
        new_node->command = strdup(command);
    if (variable)
        new_node->variable = strdup(variable);
    if (infile)
        new_node->infile = strdup(infile);
    if (outfile)
        new_node->outfile = strdup(outfile);

    if (!data->head)
    {
        data->head = new_node;
        data->tail = new_node;
    }
    else
    {
        data->tail->next = new_node;
        data->tail = new_node;
    }
}

void append_variable(char **variable, const char *token)
{
    if (*variable)
    {
        size_t len = strlen(*variable) + strlen(token) + 2;
        char *temp = (char *)malloc(len);
        if (temp)
        {
            strcpy(temp, *variable);
            strcat(temp, " ");
            strcat(temp, token);
            free(*variable);
            *variable = temp;
        }
    }
    else
    {
        *variable = strdup(token);
    }
}

void parse_token(char *cmd_buff, t_parse *data)
{
    char *command = NULL;
    char *variable = NULL;
    char *infile = NULL;
    char *outfile = NULL;
    char *start = cmd_buff;
    char *end = cmd_buff;
    int mode = 0;

    while (*end)
    {
        if (*end == ' ' || *end == '|' || *end == '<' || *end == '>')
        {
            if (start != end)
            {
                char *token = strndup(start, end - start);
                if (mode == 1)
                {
                    infile = token;
                    mode = 0;
                }
                else if (mode == 2)
                {
                    outfile = token;
                    mode = 0;
                }
                else if (!command)
                {
                    command = token;
                }
                else
                {
                    append_variable(&variable, token);
                    free(token);
                }
            }
            if (*end == '|')
            {
                add_node(data, command, variable, infile, outfile);
				free(command);
				free(variable);
				free(infile);
				free(outfile);
                command = variable = infile = outfile = NULL;
            }
            else if (*end == '<')
            {
                mode = 1;
            }
            else if (*end == '>')
            {
                mode = 2;
            }
            start = end + 1;
        }
        end++;
    }
    if (start != end)
    {
        char *token = strndup(start, end - start);
        if (mode == 1)
        {
            infile = token;
        }
        else if (mode == 2)
        {
            outfile = token;
        }
        else if (!command)
        {
            command = token;
        }
        else
        {
            append_variable(&variable, token);
            free(token);
        }
    }
    add_node(data, command, variable, infile, outfile);
	free(command);
	free(variable);
	free(infile);
	free(outfile);
}

void free_parse(t_parse *data)
{
    t_par *current = data->head;
    t_par *next;

    while (current)
    {
        next = current->next;
        if (current->command)
            free(current->command);
        if (current->variable)
            free(current->variable);
        if (current->infile)
            free(current->infile);
        if (current->outfile)
            free(current->outfile);
        free(current);
        current = next;
    }
    data->head = NULL;
    data->tail = NULL;
}

int main(int argc, char **argv)
{
	t_parse	data;
	
	if (argc == 2)
	{
		parse_token (argv[1], &data);
	}
    t_par *current = data.head;
    while (current)
    {
        printf("Command: %s, Variable: %s, Infile: %s, Outfile: %s\n",
               current->command, current->variable, current->infile, current->outfile);
        current = current->next;
    }
    free_parse(&data);

	return (0);
}
