/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_token.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: Guillem Barulls <Guillem Barulls>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/28 09:37:06 by Guillem Barulls   #+#    #+#             */
/*   Updated: 2025/01/28 10:07:18 by Guillem Barulls  ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/parse.h"

void parse_token(char *cmd_buff, t_parse *data)
{
    char	*start;
    char	*end;
	char	*token;
    int		mode;

	start = cmd_buff;
	end = cmd_buff;
	mode = 0;
    while (*end)
    {
        if (*end == ' ' || *end == '|' || *end == '<' || *end == '>')
        {
            if (start != end)
            {
                token = ft_strndup(start, end - start);
                if (mode == 1)
                    data->infile = token;
                else if (mode == 2)
                    data->outfile = token;
                else if (mode == 3)
                    data->a_infile = token;
                else if (mode == 4)
                    data->a_outfile = token;
                else if (!data->command)
                    data->command = token;
                else
                {
                    append_parameter(&data->parameter, token);
                    free(token);
                }
				if (mode >= 1 && mode <= 4)
					mode = 0;
            }
            if (*end == '|')
                add_node(data);
            else if (*end == '<')
            {
                if (*(end + 1) == '<')
                {
                    mode = 3;
                    end++;
                }
                else
                    mode = 1;
            }
            else if (*end == '>')
            {
                if (*(end + 1) == '>')
                {
                    mode = 4;
                    end++;
                }
                else
                    mode = 2;
            }
            start = end + 1;
        }
        end++;
    }
    if (start != end)
    {
        token = ft_strndup(start, end - start);
        if (mode == 1)
            data->infile = token;
        else if (mode == 2)
            data->outfile = token;
        else if (mode == 3)
            data->a_infile = token;
        else if (mode == 4)
            data->a_outfile = token;
        else if (!data->command)
            data->command = token;
        else
        {
            append_parameter(&data->parameter, token);
            free(token);
        }
    }
    add_node(data);
}
